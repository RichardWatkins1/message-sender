service: message-sender

provider:
  name: aws
  runtime: nodejs14.x
  stage: production
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "sqs:ReceiveMessage"
            - "SNS:Publish"
            - "cloudwatch:PutMetricData"
          Resource:
            - "*"

# you can add packaging information here
package:
  include:
  exclude:
    - node_modules

functions:
  send-message:
    description: >-
      Reads a message from an SQS Queue (MessageQueue), publishes the message to the provided phone number
    handler: ./dist/handler.default
    async: true
    events:
      - sqs:
          arn: { "Fn::GetAtt": ["MessageQueue", "Arn"] }
          enabled: true
          batchSize: 1
      - sqs:
          arn: { "Fn::GetAtt": ["DeadMessageQueue", "Arn"] }
          enabled: false
          batchSize: 1

custom:
  apiGatewayServiceProxies:
    - sns:
        path: /sns
        method: post
        topicName: { "Fn::GetAtt": ["CaptureSNSTopic", "TopicName"] }
        # cors: true
        response:
          template:
            # `success` is used when the integration response is 200
            success: |-
              { "message: "accepted" }
            # `clientError` is used when the integration response is 400
            clientError: |-
              { "message": "there is an error in your request" }
            # `serverError` is used when the integration response is 500
            serverError: |-
              { "message": "there was an error handling your request" }

resources:
  Resources:
    CaptureSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "capture-sns-topic"

    MessageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: message-queue
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 180
        RedrivePolicy:
          {
            "deadLetterTargetArn":
              { "Fn::GetAtt": ["DeadMessageQueue", "Arn"] },
            "maxReceiveCount": 3,
          }

    DeadMessageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: dead-message-queue
        VisibilityTimeout: 180
        MessageRetentionPeriod: 1209600

    snsToMessageQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: { "Fn::GetAtt": ["MessageQueue", "Arn"] }
              Action:
                - "SQS:SendMessage"
                - "SQS:ReceiveMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref CaptureSNSTopic
        Queues:
          - Ref: MessageQueue

    MessageQueueSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn: "arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:capture-sns-topic"
        Endpoint: { "Fn::GetAtt": ["MessageQueue", "Arn"] }
        Protocol: sqs
        RawMessageDelivery: "true"

plugins:
  - serverless-apigateway-service-proxy
  - serverless-pseudo-parameters
